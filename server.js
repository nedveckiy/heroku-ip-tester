const express = require('express');
const axios = require('axios');
const fs = require('fs').promises;
const path = require('path');

const app = express();
const PORT = process.env.PORT || 3000;

// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
const CONFIG = {
    testQuery: 'test search query site:example.com',
    delayBetweenRequests: 1000, // 1 —Å–µ–∫—É–Ω–¥–∞
    maxRequestsPerTest: 1,      // 1 –∑–∞–ø–∏—Ç
    logFile: 'ip_rotation_log.txt'
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ IP
async function getCurrentIP() {
    try {
        const response = await axios.get('https://api.ipify.org?format=json', {
            timeout: 5000
        });
        return response.data.ip;
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è IP:', error.message);
        return 'Unknown';
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è Google Search (–±–µ–∑–ø–µ—á–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç)
async function testGoogleSearch(query, requestNumber) {
    const userAgents = [
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
        'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
        'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    ];

    const randomUA = userAgents[Math.floor(Math.random() * userAgents.length)];
    
    try {
        // –¢–µ—Å—Ç—É—î–º–æ –Ω–∞ httpbin.org –∑–∞–º—ñ—Å—Ç—å Google (–±–µ–∑–ø–µ—á–Ω—ñ—à–µ)
        const response = await axios.get('https://httpbin.org/ip', {
            headers: {
                'User-Agent': randomUA,
                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
                'Accept-Language': 'uk-UA,uk;q=0.9,en;q=0.8',
                'Accept-Encoding': 'gzip, deflate, br',
                'Connection': 'keep-alive',
                'Upgrade-Insecure-Requests': '1'
            },
            timeout: 10000
        });

        return {
            success: true,
            statusCode: response.status,
            responseTime: Date.now(),
            blocked: false,
            data: response.data
        };

    } catch (error) {
        const isBlocked = error.response && (
            error.response.status === 429 || // Too Many Requests
            error.response.status === 403 || // Forbidden
            (error.response.status === 503 && error.response.data.includes('blocked'))
        );

        return {
            success: false,
            statusCode: error.response ? error.response.status : 'TIMEOUT',
            responseTime: Date.now(),
            blocked: isBlocked,
            error: error.message
        };
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
async function logResult(logEntry) {
    const logLine = `${new Date().toISOString()} | ${JSON.stringify(logEntry)}\n`;
    
    try {
        await fs.appendFile(CONFIG.logFile, logLine);
        console.log('‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ –≤ –ª–æ–≥:', logEntry);
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É –≤ –ª–æ–≥:', error.message);
    }
}

// –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
async function runIPRotationTest() {
    console.log('üöÄ –ü–æ—á–∞—Ç–æ–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ä–æ—Ç–∞—Ü—ñ—ó IP –Ω–∞ Heroku');
    
    const currentIP = await getCurrentIP();
    const testStartTime = Date.now();
    
    console.log(`üîç –ü–æ—Ç–æ—á–Ω–∏–π IP: ${currentIP}`);
    console.log(`üìù –¢–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø–∏—Ç: "${CONFIG.testQuery}"`);
    
    const results = {
        startTime: new Date().toISOString(),
        initialIP: currentIP,
        requests: [],
        summary: {}
    };

    for (let i = 1; i <= CONFIG.maxRequestsPerTest; i++) {
        console.log(`\nüìä –ó–∞–ø–∏—Ç ${i}/${CONFIG.maxRequestsPerTest}`);
        
        const requestStartTime = Date.now();
        const testResult = await testGoogleSearch(CONFIG.testQuery, i);
        const requestEndTime = Date.now();
        
        const logEntry = {
            requestNumber: i,
            ip: currentIP,
            timestamp: new Date().toISOString(),
            ...testResult,
            responseTime: requestEndTime - requestStartTime
        };
        
        results.requests.push(logEntry);
        await logResult(logEntry);
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ
        if (testResult.blocked) {
            console.log('üö´ –ó–ê–ë–õ–û–ö–û–í–ê–ù–û! IP –ø–æ—Ç—Ä–µ–±—É—î —Ä–æ—Ç–∞—Ü—ñ—ó');
            break;
        }
        
        // –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
        if (i < CONFIG.maxRequestsPerTest) {
            console.log(`‚è±Ô∏è  –û—á—ñ–∫—É–≤–∞–Ω–Ω—è ${CONFIG.delayBetweenRequests}ms...`);
            await new Promise(resolve => setTimeout(resolve, CONFIG.delayBetweenRequests));
        }
    }
    
    // –ê–Ω–∞–ª—ñ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    const successfulRequests = results.requests.filter(r => r.success).length;
    const blockedRequests = results.requests.filter(r => r.blocked).length;
    
    results.summary = {
        totalRequests: results.requests.length,
        successfulRequests,
        blockedRequests,
        successRate: (successfulRequests / results.requests.length * 100).toFixed(2),
        testDuration: Date.now() - testStartTime
    };
    
    console.log('\nüìà –†–ï–ó–£–õ–¨–¢–ê–¢–ò –¢–ï–°–¢–£–í–ê–ù–ù–Ø:');
    console.log(`‚úÖ –£—Å–ø—ñ—à–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤: ${successfulRequests}/${results.requests.length}`);
    console.log(`üö´ –ó–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö: ${blockedRequests}`);
    console.log(`üìä –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: ${results.summary.successRate}%`);
    console.log(`‚è±Ô∏è  –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: ${results.summary.testDuration}ms`);
    
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–≤–Ω–∏–π –∑–≤—ñ—Ç
    await fs.writeFile('test_results.json', JSON.stringify(results, null, 2));
    
    return results;
}

// API endpoints
app.get('/', (req, res) => {
    res.send(`
        <h1>üîÑ Heroku IP Rotation Tester</h1>
        <p><strong>–ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å:</strong> ${new Date().toLocaleString()}</p>
        <h2>–î–æ—Å—Ç—É–ø–Ω—ñ –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∏:</h2>
        <ul>
            <li><a href="/test">GET /test</a> - –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Ç–µ—Å—Ç</li>
            <li><a href="/ip">GET /ip</a> - –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π IP</li>
            <li><a href="/logs">GET /logs</a> - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ª–æ–≥–∏</li>
            <li><a href="/results">GET /results</a> - –û—Å—Ç–∞–Ω–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏</li>
            <li><a href="/stress-test">GET /stress-test</a> - –°—Ç—Ä–µ—Å-—Ç–µ—Å—Ç (–∑–∞–ø–∏—Ç–∏ –∫–æ–∂–Ω—É —Å–µ–∫—É–Ω–¥—É)</li>
            <li><a href="/crash-report">GET /crash-report</a> - –ó–≤—ñ—Ç –ø—Ä–æ –∫—Ä–∞—Ö —Å–∏—Å—Ç–µ–º–∏</li>
            <li><a href="/restart-hint">GET /restart-hint</a> - –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –¥–ª—è —Ä–æ—Ç–∞—Ü—ñ—ó IP</li>
        </ul>
    `);
});

app.get('/test', async (req, res) => {
    try {
        console.log('üéØ –û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–ø–∏—Ç –Ω–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è');
        const results = await runIPRotationTest();
        res.json(results);
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:', error);
        res.status(500).json({ error: error.message });
    }
});

app.get('/ip', async (req, res) => {
    const ip = await getCurrentIP();
    res.json({ 
        ip: ip,
        timestamp: new Date().toISOString(),
        heroku_dyno: process.env.DYNO || 'local'
    });
});

app.get('/logs', async (req, res) => {
    try {
        const logs = await fs.readFile(CONFIG.logFile, 'utf-8');
        res.type('text/plain');
        res.send(logs);
    } catch (error) {
        res.status(404).json({ error: '–õ–æ–≥–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ' });
    }
});

app.get('/results', async (req, res) => {
    try {
        const results = await fs.readFile('test_results.json', 'utf-8');
        res.json(JSON.parse(results));
    } catch (error) {
        res.status(404).json({ error: '–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ' });
    }
});

app.get('/restart-hint', (req, res) => {
    res.json({
        message: '–î–ª—è —Ä–æ—Ç–∞—Ü—ñ—ó IP –Ω–∞ Heroku:',
        methods: [
            'heroku restart --app YOUR_APP_NAME',
            'heroku ps:restart --app YOUR_APP_NAME', 
            '–ß–µ—Ä–µ–∑ Heroku Dashboard -> More -> Restart all dynos'
        ],
        note: '–ü—ñ—Å–ª—è —Ä–µ—Å—Ç–∞—Ä—Ç—É IP –∞–¥—Ä–µ—Å–∞ –∑–º—ñ–Ω–∏—Ç—å—Å—è'
    });
});

// –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—é —Å—Ç—Ä–µ—Å-—Ç–µ—Å—Ç—É
let stressTestRunning = false;

// –°—Ç—Ä–µ—Å-—Ç–µ—Å—Ç: –∑–∞–ø–∏—Ç–∏ –∫–æ–∂–Ω—É —Å–µ–∫—É–Ω–¥—É –¥–æ –ø–∞–¥—ñ–Ω–Ω—è
app.get('/stress-test', async (req, res) => {
    if (stressTestRunning) {
        return res.json({ 
            error: '–°—Ç—Ä–µ—Å-—Ç–µ—Å—Ç –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–∏–π!', 
            message: '–î–æ—á–µ–∫–∞–π—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∞–±–æ —Ä–µ—Å—Ç–∞—Ä—Ç—É–π—Ç–µ dyno' 
        });
    }
    
    stressTestRunning = true;
    console.log('üî• –ü–æ—á–∞—Ç–æ–∫ —Å—Ç—Ä–µ—Å-—Ç–µ—Å—Ç—É');
    
    const results = {
        startTime: new Date().toISOString(),
        initialIP: await getCurrentIP(),
        requests: [],
        isRunning: true
    };
    
    res.json({ message: '–°—Ç—Ä–µ—Å-—Ç–µ—Å—Ç –∑–∞–ø—É—â–µ–Ω–∏–π. –î–∏–≤—ñ—Ç—å—Å—è –ª–æ–≥–∏.', initialIP: results.initialIP });
    
    let requestCount = 0;
    const stressInterval = setInterval(async () => {
        if (!results.isRunning) {
            clearInterval(stressInterval);
            return;
        }
        
        requestCount++;
        console.log(`üöÄ –°—Ç—Ä–µ—Å-–∑–∞–ø–∏—Ç #${requestCount}`);
        
        try {
            const testResult = await testGoogleSearch('stress test', requestCount);
            const logEntry = {
                requestNumber: requestCount,
                ip: results.initialIP,
                timestamp: new Date().toISOString(),
                ...testResult
            };
            
            results.requests.push(logEntry);
            await logResult(logEntry);
            
            if (!testResult.success) {
                console.log(`üí• –ü–µ—Ä—à–∏–π –ø—Ä–æ–≤–∞–ª –Ω–∞ –∑–∞–ø–∏—Ç—ñ #${requestCount}`);
            }
            
        } catch (error) {
            console.log(`üíÄ –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê –Ω–∞ –∑–∞–ø–∏—Ç—ñ #${requestCount}:`, error.message);
            results.isRunning = false;
            stressTestRunning = false; // –°–∫–∏–¥–∞—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–∏–π —Ñ–ª–∞–≥
            clearInterval(stressInterval);
            
            // –ó–∞–ø–∏—Å—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∫—Ä–∞—Ö—É
            const crashReport = {
                ...results,
                crashedAt: requestCount,
                crashTime: new Date().toISOString(),
                error: error.message
            };
            
            await fs.writeFile('crash_report.json', JSON.stringify(crashReport, null, 2));
            console.log('üìÑ –ó–≤—ñ—Ç –ø—Ä–æ –∫—Ä–∞—Ö –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ crash_report.json');
        }
    }, 1000); // –ö–æ–∂–Ω—É —Å–µ–∫—É–Ω–¥—É
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑—É–ø–∏–Ω–µ–Ω–Ω—è —á–µ—Ä–µ–∑ 10 —Ö–≤–∏–ª–∏–Ω —è–∫—â–æ –Ω–µ –≤–ø–∞–¥–µ
    setTimeout(() => {
        if (results.isRunning) {
            results.isRunning = false;
            stressTestRunning = false; // –°–∫–∏–¥–∞—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–∏–π —Ñ–ª–∞–≥
            clearInterval(stressInterval);
            console.log('‚è∞ –°—Ç—Ä–µ—Å-—Ç–µ—Å—Ç –∑—É–ø–∏–Ω–µ–Ω–∏–π —á–µ—Ä–µ–∑ 10 —Ö–≤–∏–ª–∏–Ω');
        }
    }, 600000);
});

app.get('/stop-stress', (req, res) => {
    stressTestRunning = false;
    res.json({ message: '–°—Ç—Ä–µ—Å-—Ç–µ—Å—Ç –∑—É–ø–∏–Ω–µ–Ω–∏–π –ø—Ä–∏–º—É—Å–æ–≤–æ' });
});

app.get('/crash-report', async (req, res) => {
    try {
        const report = await fs.readFile('crash_report.json', 'utf-8');
        res.json(JSON.parse(report));
    } catch (error) {
        res.status(404).json({ error: '–ó–≤—ñ—Ç –ø—Ä–æ –∫—Ä–∞—Ö –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
    }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log(`üåê –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–∏–π –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üîç –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ IP: http://localhost:${PORT}/ip`);
    console.log(`üß™ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Ç–µ—Å—Ç: http://localhost:${PORT}/test`);
});

// Graceful shutdown
process.on('SIGTERM', () => {
    console.log('üëã –°–µ—Ä–≤–µ—Ä –∑—É–ø–∏–Ω—è—î—Ç—å—Å—è...');
    process.exit(0);
});
