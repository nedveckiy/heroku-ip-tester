const express = require('express');
const axios = require('axios');
const fs = require('fs').promises;
const path = require('path');

const app = express();
const PORT = process.env.PORT || 3000;

// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
const CONFIG = {
    testQuery: 'test search query site:example.com',
    delayBetweenRequests: 1000, // 1 —Å–µ–∫—É–Ω–¥–∞
    maxRequestsPerTest: 1,      // 1 –∑–∞–ø–∏—Ç
    logFile: 'ip_rotation_log.txt'
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ IP
async function getCurrentIP() {
    try {
        const response = await axios.get('https://api.ipify.org?format=json', {
            timeout: 5000
        });
        return response.data.ip;
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è IP:', error.message);
        return 'Unknown';
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è Google Search (–±–µ–∑–ø–µ—á–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç)
async function testGoogleSearch(query, requestNumber) {
    const userAgents = [
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
        'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
        'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    ];

    const randomUA = userAgents[Math.floor(Math.random() * userAgents.length)];
    
    try {
        // –¢–µ—Å—Ç—É—î–º–æ –Ω–∞ httpbin.org –∑–∞–º—ñ—Å—Ç—å Google (–±–µ–∑–ø–µ—á–Ω—ñ—à–µ)
        const response = await axios.get('https://httpbin.org/ip', {
            headers: {
                'User-Agent': randomUA,
                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
                'Accept-Language': 'uk-UA,uk;q=0.9,en;q=0.8',
                'Accept-Encoding': 'gzip, deflate, br',
                'Connection': 'keep-alive',
                'Upgrade-Insecure-Requests': '1'
            },
            timeout: 10000
        });

        return {
            success: true,
            statusCode: response.status,
            responseTime: Date.now(),
            blocked: false,
            data: response.data
        };

    } catch (error) {
        const isBlocked = error.response && (
            error.response.status === 429 || // Too Many Requests
            error.response.status === 403 || // Forbidden
            (error.response.status === 503 && error.response.data.includes('blocked'))
        );

        return {
            success: false,
            statusCode: error.response ? error.response.status : 'TIMEOUT',
            responseTime: Date.now(),
            blocked: isBlocked,
            error: error.message
        };
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
async function logResult(logEntry) {
    const logLine = `${new Date().toISOString()} | ${JSON.stringify(logEntry)}\n`;
    
    try {
        await fs.appendFile(CONFIG.logFile, logLine);
        console.log('‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ –≤ –ª–æ–≥:', logEntry);
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É –≤ –ª–æ–≥:', error.message);
    }
}

// –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
async function runIPRotationTest() {
    console.log('üöÄ –ü–æ—á–∞—Ç–æ–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ä–æ—Ç–∞—Ü—ñ—ó IP –Ω–∞ Heroku');
    
    const currentIP = await getCurrentIP();
    const testStartTime = Date.now();
    
    console.log(`üîç –ü–æ—Ç–æ—á–Ω–∏–π IP: ${currentIP}`);
    console.log(`üìù –¢–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø–∏—Ç: "${CONFIG.testQuery}"`);
    
    const results = {
        startTime: new Date().toISOString(),
        initialIP: currentIP,
        requests: [],
        summary: {}
    };

    for (let i = 1; i <= CONFIG.maxRequestsPerTest; i++) {
        console.log(`\nüìä –ó–∞–ø–∏—Ç ${i}/${CONFIG.maxRequestsPerTest}`);
        
        const requestStartTime = Date.now();
        const testResult = await testGoogleSearch(CONFIG.testQuery, i);
        const requestEndTime = Date.now();
        
        const logEntry = {
            requestNumber: i,
            ip: currentIP,
            timestamp: new Date().toISOString(),
            ...testResult,
            responseTime: requestEndTime - requestStartTime
        };
        
        results.requests.push(logEntry);
        await logResult(logEntry);
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ
        if (testResult.blocked) {
            console.log('üö´ –ó–ê–ë–õ–û–ö–û–í–ê–ù–û! IP –ø–æ—Ç—Ä–µ–±—É—î —Ä–æ—Ç–∞—Ü—ñ—ó');
            break;
        }
        
        // –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏ - —Ç–æ—á–Ω–æ 1 —Å–µ–∫—É–Ω–¥–∞
        if (i < CONFIG.maxRequestsPerTest) {
            console.log(`‚è±Ô∏è  –û—á—ñ–∫—É–≤–∞–Ω–Ω—è ${CONFIG.delayBetweenRequests}ms...`);
            await new Promise(resolve => setTimeout(resolve, CONFIG.delayBetweenRequests));
        }
    }
    
    // –ê–Ω–∞–ª—ñ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    const successfulRequests = results.requests.filter(r => r.success).length;
    const blockedRequests = results.requests.filter(r => r.blocked).length;
    
    results.summary = {
        totalRequests: results.requests.length,
        successfulRequests,
        blockedRequests,
        successRate: (successfulRequests / results.requests.length * 100).toFixed(2),
        testDuration: Date.now() - testStartTime
    };
    
    console.log('\nüìà –†–ï–ó–£–õ–¨–¢–ê–¢–ò –¢–ï–°–¢–£–í–ê–ù–ù–Ø:');
    console.log(`‚úÖ –£—Å–ø—ñ—à–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤: ${successfulRequests}/${results.requests.length}`);
    console.log(`üö´ –ó–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö: ${blockedRequests}`);
    console.log(`üìä –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: ${results.summary.successRate}%`);
    console.log(`‚è±Ô∏è  –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: ${results.summary.testDuration}ms`);
    
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–≤–Ω–∏–π –∑–≤—ñ—Ç
    await fs.writeFile('test_results.json', JSON.stringify(results, null, 2));
    
    return results;
}

// API endpoints
app.get('/', (req, res) => {
    res.send(`
        <!DOCTYPE html>
        <html lang="uk">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>üîÑ Heroku IP Rotation Tester</title>
            <style>
                body {
                    font-family: Arial, sans-serif;
                    max-width: 800px;
                    margin: 0 auto;
                    padding: 20px;
                    background-color: #f5f5f5;
                }
                .container {
                    background: white;
                    padding: 30px;
                    border-radius: 10px;
                    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                }
                h1 {
                    color: #333;
                    text-align: center;
                }
                .status {
                    text-align: center;
                    background: #e3f2fd;
                    padding: 15px;
                    border-radius: 5px;
                    margin: 20px 0;
                }
                .buttons {
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                    gap: 15px;
                    margin: 30px 0;
                }
                .btn {
                    padding: 15px 20px;
                    border: none;
                    border-radius: 5px;
                    cursor: pointer;
                    font-size: 16px;
                    text-decoration: none;
                    display: inline-block;
                    text-align: center;
                    transition: background-color 0.3s;
                }
                .btn-primary { background: #2196F3; color: white; }
                .btn-success { background: #4CAF50; color: white; }
                .btn-warning { background: #FF9800; color: white; }
                .btn-danger { background: #f44336; color: white; }
                .btn-info { background: #17a2b8; color: white; }
                .btn-secondary { background: #6c757d; color: white; }
                .btn:hover {
                    opacity: 0.9;
                    transform: translateY(-2px);
                }
                .stress-controls {
                    background: #fff3cd;
                    padding: 20px;
                    border-radius: 5px;
                    margin: 20px 0;
                    border-left: 4px solid #ffc107;
                }
                .stress-controls h3 {
                    margin-top: 0;
                    color: #856404;
                }
                ul {
                    list-style: none;
                    padding: 0;
                }
                li {
                    margin: 10px 0;
                }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>üîÑ Heroku IP Rotation Tester</h1>
                
                <div class="status">
                    <strong>üïê –ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å:</strong> ${new Date().toLocaleString('uk-UA')}<br>
                    <strong>‚ö° –°—Ç–∞—Ç—É—Å:</strong> <span id="server-status">–ê–∫—Ç–∏–≤–Ω–∏–π</span>
                </div>

                <div class="buttons">
                    <a href="/ip" class="btn btn-primary">üåê –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ IP</a>
                    <a href="/logs" class="btn btn-info">üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ª–æ–≥–∏</a>
                </div>

                <div class="stress-controls">
                    <h3>‚ö†Ô∏è –°—Ç—Ä–µ—Å-—Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è</h3>
                    <p>–ó–∞–ø–∏—Ç–∏ –∫–æ–∂–Ω—É —Å–µ–∫—É–Ω–¥—É –∑ –∑–∞—Ç—Ä–∏–º–∫–æ—é 1000–º—Å –¥–æ –∫—Ä–∞—Ö—É —Å–∏—Å—Ç–µ–º–∏</p>
                    <div class="buttons">
                        <a href="/stress-test" class="btn btn-warning">üî• –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Å—Ç—Ä–µ—Å-—Ç–µ—Å—Ç</a>
                        <button onclick="stopStressTest()" class="btn btn-danger">üõë STOP –°—Ç—Ä–µ—Å-—Ç–µ—Å—Ç</button>
                    </div>
                    <div class="buttons">
                        <a href="/crash-report" class="btn btn-secondary">üìÑ –ó–≤—ñ—Ç –ø—Ä–æ –∫—Ä–∞—Ö</a>
                        <a href="/restart-hint" class="btn btn-info">üîÑ –Ø–∫ —Ä–æ—Ç—É–≤–∞—Ç–∏ IP</a>
                    </div>
                </div>
            </div>

            <script>
                async function stopStressTest() {
                    try {
                        const response = await fetch('/stop-stress');
                        const result = await response.json();
                        alert('‚úÖ ' + result.message);
                        
                        // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å
                        document.getElementById('server-status').textContent = '–°—Ç—Ä–µ—Å-—Ç–µ—Å—Ç –∑—É–ø–∏–Ω–µ–Ω–æ';
                        document.getElementById('server-status').style.color = '#28a745';
                        
                    } catch (error) {
                        alert('‚ùå –ü–æ–º–∏–ª–∫–∞: ' + error.message);
                    }
                }

                // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É —Å—Ç—Ä–µ—Å-—Ç–µ—Å—Ç—É –∫–æ–∂–Ω—ñ 5 —Å–µ–∫—É–Ω–¥
                setInterval(async () => {
                    try {
                        const response = await fetch('/stress-status');
                        const status = await response.json();
                        const statusElement = document.getElementById('server-status');
                        
                        if (status.running) {
                            statusElement.textContent = '–°—Ç—Ä–µ—Å-—Ç–µ—Å—Ç –∞–∫—Ç–∏–≤–Ω–∏–π (' + status.requestCount + ' –∑–∞–ø–∏—Ç—ñ–≤)';
                            statusElement.style.color = '#dc3545';
                        } else {
                            statusElement.textContent = '–ê–∫—Ç–∏–≤–Ω–∏–π';
                            statusElement.style.color = '#28a745';
                        }
                    } catch (error) {
                        // –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ —Å—Ç–∞—Ç—É—Å—É
                    }
                }, 5000);
            </script>
        </body>
        </html>
    `);
});

app.get('/test', async (req, res) => {
    try {
        console.log('üéØ –û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–ø–∏—Ç –Ω–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è');
        const results = await runIPRotationTest();
        res.json(results);
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:', error);
        res.status(500).json({ error: error.message });
    }
});

app.get('/ip', async (req, res) => {
    const ip = await getCurrentIP();
    res.json({ 
        ip: ip,
        timestamp: new Date().toISOString(),
        heroku_dyno: process.env.DYNO || 'local'
    });
});

app.get('/logs', async (req, res) => {
    try {
        const logs = await fs.readFile(CONFIG.logFile, 'utf-8');
        res.type('text/plain');
        res.send(logs);
    } catch (error) {
        res.status(404).json({ error: '–õ–æ–≥–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ' });
    }
});

app.get('/results', async (req, res) => {
    try {
        const results = await fs.readFile('test_results.json', 'utf-8');
        res.json(JSON.parse(results));
    } catch (error) {
        res.status(404).json({ error: '–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ' });
    }
});

app.get('/restart-hint', (req, res) => {
    res.json({
        message: '–î–ª—è —Ä–æ—Ç–∞—Ü—ñ—ó IP –Ω–∞ Heroku:',
        methods: [
            'heroku restart --app YOUR_APP_NAME',
            'heroku ps:restart --app YOUR_APP_NAME', 
            '–ß–µ—Ä–µ–∑ Heroku Dashboard -> More -> Restart all dynos'
        ],
        note: '–ü—ñ—Å–ª—è —Ä–µ—Å—Ç–∞—Ä—Ç—É IP –∞–¥—Ä–µ—Å–∞ –∑–º—ñ–Ω–∏—Ç—å—Å—è'
    });
});

// –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—é —Å—Ç—Ä–µ—Å-—Ç–µ—Å—Ç—É
let stressTestRunning = false;
let stressRequestCount = 0;
// –í–∏–¥–∞–ª—è—î–º–æ stressTestInterval - –±—ñ–ª—å—à–µ –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω

// –°—Ç—Ä–µ—Å-—Ç–µ—Å—Ç: –ü–û–°–õ–Ü–î–û–í–ù–Ü –∑–∞–ø–∏—Ç–∏ –±–µ–∑ race conditions
app.get('/stress-test', async (req, res) => {
    if (stressTestRunning) {
        return res.json({ 
            error: '–°—Ç—Ä–µ—Å-—Ç–µ—Å—Ç –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–∏–π!', 
            message: '–î–æ—á–µ–∫–∞–π—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å STOP',
            currentCount: stressRequestCount
        });
    }
    
    stressTestRunning = true;
    stressRequestCount = 0;
    console.log('üî• –ü–æ—á–∞—Ç–æ–∫ –ü–û–°–õ–Ü–î–û–í–ù–û–ì–û —Å—Ç—Ä–µ—Å-—Ç–µ—Å—Ç—É (–ë–ï–ó race conditions)');
    
    const results = {
        startTime: new Date().toISOString(),
        initialIP: await getCurrentIP(),
        requests: [],
        isRunning: true
    };
    
    res.json({ 
        message: '–ü–û–°–õ–Ü–î–û–í–ù–ò–ô —Å—Ç—Ä–µ—Å-—Ç–µ—Å—Ç –∑–∞–ø—É—â–µ–Ω–∏–π. 1 –∑–∞–ø–∏—Ç -> –∑–∞—Ç—Ä–∏–º–∫–∞ 1—Å–µ–∫ -> –Ω–∞—Å—Ç—É–ø–Ω–∏–π –∑–∞–ø–∏—Ç.', 
        initialIP: results.initialIP,
        interval: '–ü–æ—Å–ª—ñ–¥–æ–≤–Ω–æ –∑ –∑–∞—Ç—Ä–∏–º–∫–æ—é 1000ms'
    });
    
    // –ü–û–°–õ–Ü–î–û–í–ù–ê —Ñ—É–Ω–∫—Ü—ñ—è –±–µ–∑ race conditions
    async function sequentialStressTest() {
        if (!stressTestRunning) {
            return;
        }
        
        // –Ü–Ω–∫—Ä–µ–º–µ–Ω—Ç—É—î–º–æ –ü–ï–†–ï–î –∑–∞–ø–∏—Ç–æ–º
        stressRequestCount++;
        const currentRequestNumber = stressRequestCount;
        
        console.log(`üöÄ –ü–æ—Å–ª—ñ–¥–æ–≤–Ω–∏–π –∑–∞–ø–∏—Ç #${currentRequestNumber} [${new Date().toISOString()}]`);
        
        try {
            // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –°–ò–ù–•–†–û–ù–ù–û
            const testResult = await testGoogleSearch('stress test', currentRequestNumber);
            const logEntry = {
                requestNumber: currentRequestNumber,
                ip: results.initialIP,
                timestamp: new Date().toISOString(),
                ...testResult
            };
            
            results.requests.push(logEntry);
            await logResult(logEntry);
            
            if (!testResult.success) {
                console.log(`üí• –ü–µ—Ä—à–∏–π –ø—Ä–æ–≤–∞–ª –Ω–∞ –∑–∞–ø–∏—Ç—ñ #${currentRequestNumber}`);
            }
            
            console.log(`‚úÖ –ó–∞–ø–∏—Ç #${currentRequestNumber} –∑–∞–≤–µ—Ä—à–µ–Ω–æ, —á–µ–∫–∞—î–º–æ 1 —Å–µ–∫—É–Ω–¥—É...`);
            
            // –ß–µ–∫–∞—î–º–æ –¢–û–ß–ù–û 1 —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–∏–º –∑–∞–ø–∏—Ç–æ–º
            setTimeout(sequentialStressTest, 1000);
            
        } catch (error) {
            console.log(`üíÄ –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê –Ω–∞ –∑–∞–ø–∏—Ç—ñ #${currentRequestNumber}:`, error.message);
            
            // –ó—É–ø–∏–Ω—è—î–º–æ —Ç–µ—Å—Ç
            stressTestRunning = false;
            
            // –ó–∞–ø–∏—Å—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∫—Ä–∞—Ö—É
            const crashReport = {
                ...results,
                crashedAt: currentRequestNumber,
                crashTime: new Date().toISOString(),
                error: error.message,
                totalRequests: currentRequestNumber
            };
            
            try {
                await fs.writeFile('crash_report.json', JSON.stringify(crashReport, null, 2));
                console.log('üìÑ –ó–≤—ñ—Ç –ø—Ä–æ –∫—Ä–∞—Ö –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ crash_report.json');
            } catch (writeError) {
                console.error('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø–∏—Å–∞—Ç–∏ –∑–≤—ñ—Ç –ø—Ä–æ –∫—Ä–∞—Ö:', writeError.message);
            }
        }
    }
    
    // –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä—à–∏–π –∑–∞–ø–∏—Ç
    setTimeout(sequentialStressTest, 1000);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑—É–ø–∏–Ω–µ–Ω–Ω—è —á–µ—Ä–µ–∑ 10 —Ö–≤–∏–ª–∏–Ω —è–∫—â–æ –Ω–µ –≤–ø–∞–¥–µ
    setTimeout(() => {
        if (stressTestRunning) {
            stressTestRunning = false;
            console.log(`‚è∞ –°—Ç—Ä–µ—Å-—Ç–µ—Å—Ç –∑—É–ø–∏–Ω–µ–Ω–∏–π —á–µ—Ä–µ–∑ 10 —Ö–≤–∏–ª–∏–Ω. –í–∏–∫–æ–Ω–∞–Ω–æ ${stressRequestCount} –∑–∞–ø–∏—Ç—ñ–≤`);
        }
    }, 600000); // 10 —Ö–≤–∏–ª–∏–Ω
});

app.get('/stop-stress', (req, res) => {
    if (stressTestRunning) {
        stressTestRunning = false;
        // –í–∏–¥–∞–ª—è—î–º–æ stressTestInterval - —Ç–µ–ø–µ—Ä –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è
        console.log(`üõë –ü–û–°–õ–Ü–î–û–í–ù–ò–ô —Å—Ç—Ä–µ—Å-—Ç–µ—Å—Ç –∑—É–ø–∏–Ω–µ–Ω–∏–π –ø—Ä–∏–º—É—Å–æ–≤–æ –ø—ñ—Å–ª—è ${stressRequestCount} –∑–∞–ø–∏—Ç—ñ–≤`);
        res.json({ 
            message: `–°—Ç—Ä–µ—Å-—Ç–µ—Å—Ç –∑—É–ø–∏–Ω–µ–Ω–∏–π –ø—ñ—Å–ª—è ${stressRequestCount} –∑–∞–ø–∏—Ç—ñ–≤`,
            totalRequests: stressRequestCount,
            method: 'sequential'
        });
    } else {
        res.json({ message: '–°—Ç—Ä–µ—Å-—Ç–µ—Å—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω–∏–π' });
    }
});

// –ù–æ–≤–∏–π –µ–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É
app.get('/stress-status', (req, res) => {
    res.json({
        running: stressTestRunning,
        requestCount: stressRequestCount,
        startTime: stressTestRunning ? new Date().toISOString() : null
    });
});

app.get('/crash-report', async (req, res) => {
    try {
        const report = await fs.readFile('crash_report.json', 'utf-8');
        res.json(JSON.parse(report));
    } catch (error) {
        res.status(404).json({ error: '–ó–≤—ñ—Ç –ø—Ä–æ –∫—Ä–∞—Ö –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
    }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log(`üåê –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–∏–π –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üîç –î–∞—à–±–æ—Ä–¥: http://localhost:${PORT}/`);
    console.log(`üîç –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ IP: http://localhost:${PORT}/ip`);
    console.log(`üß™ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Ç–µ—Å—Ç: http://localhost:${PORT}/test`);
    console.log(`‚è±Ô∏è  –°—Ç—Ä–µ—Å-—Ç–µ—Å—Ç: —Ç–æ—á–Ω–æ 1000–º—Å –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏`);
});

// Graceful shutdown
process.on('SIGTERM', () => {
    console.log('üëã –°–µ—Ä–≤–µ—Ä –∑—É–ø–∏–Ω—è—î—Ç—å—Å—è...');
    
    // –ó—É–ø–∏–Ω—è—î–º–æ —Å—Ç—Ä–µ—Å-—Ç–µ—Å—Ç —è–∫—â–æ –∑–∞–ø—É—â–µ–Ω–∏–π
    if (stressTestRunning) {
        stressTestRunning = false;
        console.log(`üõë –ü–û–°–õ–Ü–î–û–í–ù–ò–ô —Å—Ç—Ä–µ—Å-—Ç–µ—Å—Ç –∑—É–ø–∏–Ω–µ–Ω–∏–π —á–µ—Ä–µ–∑ SIGTERM –ø—ñ—Å–ª—è ${stressRequestCount} –∑–∞–ø–∏—Ç—ñ–≤`);
    }
    
    process.exit(0);
});
